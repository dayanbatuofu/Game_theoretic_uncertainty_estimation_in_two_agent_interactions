import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1 import make_axes_locatable
# Builtin colourmap "seismic" has the blue-white-red
#   scale you want
distance_1 = np.arange(15, 21, 1)
distance_2 = np.arange(15, 21, 1)

# baseline
"NA baseline"
loss_na_baseline = np.array([[213.3935674,	139.392717,	136.4028851	,133.8412248,	134.2133147,	125.2879378
],
[212.5427304,	287.0399658,	184.8968489,	124.4058392	,129.56882	,125.9678608
],
[210.1520001	,213.5261941	,1304.930517	,575.9437422	,138.5534508	,113.4930439
],
[207.756745	,200.0243617	,506.8713012	,2109.382456	,1061.791145,	305.9955716
],
[206.4111656	,197.422987	,190.1668942	,1112.118873	,2369.903756,	1456.019277
],
[204.0000537,	193.7449727	,187.5860379	,337.2948078	,1514.824419	,3269.066855
]
])
"A baseline"
loss_a_baseline = np.array([[98.35364823,	183.0049886,	174.7345636	,173.031848	,165.6730599	,164.0646887

],
[106.8185233,	84.29827742	,170.2942236	,169.3837767	,161.1665162,	159.0642345

],
[106.7807811,	103.4679364,	80.36192711,	163.5988647,	163.3450927,	154.7843791

],
[104.8406822	,103.893763,	76.50379196,	87.7856241	,149.9784524	,149.5708906

],
[96.60609796,	97.26275146,	90.44281143,	71.95217892	,97.31709186	,143.087177

],
[86.46118536	,90.89029407,	94.61092524	,77.16323341,	80.28144932,	106.2647898

]
])
"E NA b NA"
loss_e_na_b_na = np.array([[1238.300144	,147.3027198,	67.63393772	,47.0739062	,35.66386026,	36.45132482
],
[162.2283241,	1885.68423,	120.2523982,	84.94002777	,55.13721746,	40.91476013
],
[111.3034254,	624.6229986,	1241.958015	,427.4475935,	104.9775317,	69.81056768
],
[59.87561086	,159.1937826,	713.8656893,	2901.58919,	1044.703285,	300.152128
],
[49.6521846	,129.4388065,	154.1135832,	1117.115077,	3121.811015,	1439.334768
],
[31.95539277	,64.63238784	,231.0763796,	301.7777695,	1515.858127,	3123.563768
]
])
"E A b A"
loss_e_a_b_a = np.array([[88.70000002,	73.55000001,	64.95000001	,22.3000912,	19.90155882	,94.75000011
],
[37.35012177	,55.55052691,	79.50000055,	74.70000028,	78.15000016	,93.40000075
],
[34.10000176,	51.15000096	,68.25063438,	69.45265544,	76.95000012	,81.05000016
],
[48.20000001,	53.30000011	,60.40002649,	53.57034356,	63.65432097,	86.20000078
],
[67.72661584,	52.75	,59.10000007,	50.30108799,	57.64410029,	64.38421121
],
[20.64394477,	56.95,	51.45000001,	52.65000223,	45.57699348,	90.70262524
]
])
"NE NA b NA"
loss_ne_na_b_na = np.array([[6321.192999,	155.0537401	,67.63393772	,47.0739062	,35.66386026	,36.45132482
],
[162.2283241,	6144.753386,	120.2523982,	84.94002777	,55.13721746,	40.91476013
],
[111.3034254,	624.6229986	,1241.958015,	427.4475935,	104.9775317	,69.81056768
],
[59.87561086,	159.1937826	,713.8656893,	7114.331357,	1044.703285,	300.152128
],
[49.6521846,	129.4388065,	154.1135832,	1117.115077,	7841.224796,	1439.334768
],
[31.95539277	,64.63238784,	231.0763796	,301.7777695	,1515.858127	,3123.563768
]
])
"NE A b A"
loss_ne_a_b_a = np.array([[4645.479556,	73.55000001,	64.95000001,	22.3000912,	19.90155882,	94.75000011
],
[37.35012177	,4696.740326,	79.50000055	,74.70000028,	78.15000016,	93.40000075
],
[34.10000176,	51.15000096,	68.25063438,	69.45265544	,76.95000012,	81.05000016
],
[48.20000001	,53.30000011	,60.40002649	,53.57034356	,63.65432097	,86.20000078
],
[67.72661584	,47.9,	59.10000007,	50.30108799	,57.64410029	,64.38421121
],
[20.64394477,	56.95,	51.45000001,	52.65000223	,45.57699348	,90.70262524
]
])
# inconsistent tests
"E NA b A"
loss_e_na_b_a = np.array([[3169.588494,	337.396588	,139.0614484,	119.2081736,	35.89079772,	44.68291088
],
[3965.242725,	1026.32916,	1811.702397,	133.9997043,	55.13721746,	42.34284023
],
[110.2108011,	3836.234627,	2122.039556	,6552.215864	,104.9775317,	69.81056768
],
[113.6169554,	2107.335326,	3960.040314,	2901.58919,	6548.847585,	1063.348865
],
[96.95404117,	104.2846279,	3016.519187,	4035.935042,	3121.811015	,6928.242285
],
[40.57568831,	97.10273723,	1551.492523,	3070.591581	,5285.951215	,3492.321397
]
])
"NE NA b A"
loss_ne_na_b_a = np.array([[6883.808189,	6726.795133	,152.6061921	,138.300083	,148.3500031,	142.6
],
[5188.868661,	6791.881881,	4121.807153,	133.9997043,	113.7634247	,112.0667945
],
[162.4319967,	6445.982853,	6243.220594,	6591.364042,	104.9775317,	69.81056768
],
[980.9237291,	2428.159772,	6184.511822,	6257.246036	,6548.847585	,1063.348865
],
[91.59039089,	997.2979804,	3557.644347,	5981.003583,	7841.224796,	6928.242285
],
[29.47962902	,158.4479854,	2214.316172,	4332.512071,	6000.781665	,7608.49183
]
])
"E A b NA"
loss_e_a_b_na = np.array([[49.50008599,	39.90639091,93.95	,47.05,	88.80000007,	86
],
[680.4935207	,46.92916725	,65.40046387	,84.15	,69.7	,86.20000001
],
[122.4,	49.23578345,	59.49432645,	76.10017845,	80.20000012,	83.0000001
],
[103.05,	62.65155311,	52.42670274	,64.0913619,	77.00057524,	91.10000086
],
[64.15,	58.95000529,	86.20000001	,60.70517742	,75.31873558	,65.02731235
],
[61.1	,64.95000003	,55.85016128	,53.45651735,	52.50504209	,225.0780682
]
])

"NE A b NA"
loss_ne_a_b_na = np.array([[4385.209455	,4686.744615	,135	,47.05	,63.3	,82.5
],
[3222.083703,	4696.740326	,4380.478394	,88	,69.6	,58.4
],
[81.9,	49.23578345,	4960.611356,	4236.299477	,80.20000012	,88.8
],
[71.40097731,	41.15379803	,3095.475141	,4747.511818,	49.58046841,	91.10000086
],
[66.80000017,	74.15000747,	105.0000001	,2945.475687,	4354.817402	,4743.998449
],
[67.1	,66.90000114	,68.60000002	,53.45651735,	2931.783577	,4510.51703
]
])

# #empathetic vs NANA
# data = np.array([[-6554.969454, -4577.659056, -2841.247188, -21.16523474, -18.53494169, -32.80622906],
#                  [-4577.659056, -4920.021728, -4663.156188, -4383.708785, -3.599132801, -22.96423529],
#                  [-2841.247188, -4663.156188, -4682.640347, -4672.061109, -4349.477082, -671.4276614],
#                  [-21.16523474, -4383.708785, -4672.061109, -3975.047923, -4367.745279, -3812.515711],
#                  [-18.53494169, -3.599132801, -4349.477082, -4367.745279, -2893.679611, -3652.43223],
#                  [-32.80622906, -22.96423529, -671.4276614, -3812.515711, -3652.43223, -2912.410889]])
#
# #empathic vs non_empathetic NANA
# data = np.array([[-398.3647022, -1443.335017, -1919.651191, -3557.315432, -2313.474504, -1246.738569],
#                  [-1443.335017, -1810.105407, -1572.984022, -741.7248892, -3741.731664, -2378.168657],
#                  [-1919.651191, -1572.984022, -1870.581587, -1465.277213, -883.3712268, -3230.163909],
#                  [-3557.315432, -741.7248892, -1465.277213, -2122.116493, -1052.758288, -1220.08339],
#                  [-2313.474504, -3741.731664, -883.3712268, -1052.758288, -3244.981846, -1046.299694],
#                  [-1246.738569, -2378.168657, -3230.163909, -1220.08339, -1046.299719, -2499.85528]])
# #empathetic vs AA
# data = np.array([[-2700.037186, -1582.827419, -876.0255267, -734.3851618, -305.3026451, -10.22388635],
#                  [-1582.827419, 7.789356062, -1253.834879, -763.0978665, -655.6425264, -37.32972838],
#                  [-876.0255267, -1253.834879, 2580.754744, -2909.952597, -303.2693515, -94.44750308],
#                  [-734.3851618, -763.0978665, -2909.952597, 1745.526733, -2632.294679, -574.4040319],
#                  [-305.3026451, -655.6425264, -303.2693515, -2632.294679, 630.4747289, -903.2249341],
#                  [-10.22388635, -37.32972838, -94.44750308, - 574.4040319, -903.2249341, 79.24469394]])
#
# #empathic vs non_empathetic AA
# data = np.array([[-380.8513167, -2194.922321, -1358.099782,	83.02491096, 138.0864797, -1.66514033],
#                  [-2194.922321, -2418.76962, -2686.906621, -1845.391034, -414.4984841, 10.01582187],
#                  [-1358.099782, -2686.906621, -2916.373463, -1157.798183, -2018.621153, -987.276157],
#                  [83.02491096, -1845.391034,	-1157.798182, -1670.169519, -1366.472942, -1861.44195],
#                  [138.0864797, -414.4984841, -2018.621153, -1366.472942, -800.7040784, -1063.454731],
#                  [-1.66514033, 10.01582187, -987.276157, -535.700369, -1063.454731, -255.011174]])

# compare e.inconsistent to baseline
loss1 = np.subtract(-loss_a_baseline, -loss_e_a_b_na)
# loss1 = np.subtract(-loss_na_baseline, -loss_e_na_b_a)

# compare e to ne inconsistent
# loss1 = np.subtract(-loss_ne_a_b_na, -loss_e_a_b_na)
# loss1 = np.subtract(-loss_ne_na_b_a, -loss_e_na_b_a)
print("avg difference: ", np.sum(loss1)/36)

loss1 = np.transpose(loss1)
fig, ax = plt.subplots()
plt.pcolor(distance_1, distance_2, loss1, cmap=plt.cm.Purples, vmin=-200, vmax=600, shading='auto')
divider = make_axes_locatable(ax)


for i in range(loss1.shape[0]):
    for j in range(loss1.shape[1]):
        plt.text(j+15, i+15, '%.2f' % loss1[i, j], horizontalalignment='center', verticalalignment='center')

#fig.tight_layout()
plt.xlabel("x1")
plt.ylabel("x2")
cax = divider.append_axes("right", size="5%", pad=0.05)
#plt.pcolor(data, cmap=plt.cm.Purples, vmin=2500, vmax=10000, shading='auto')
plt.colorbar( fraction=0.046, pad=0.04, cax=cax)
fig.tight_layout()
plt.show()
